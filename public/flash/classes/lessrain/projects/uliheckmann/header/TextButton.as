import lessrain.lib.utils.assets.StyleSheet;import lessrain.lib.utils.movieclip.HitArea;import lessrain.lib.utils.Proxy;import lessrain.lib.utils.text.DynamicTextField;import lessrain.projects.uliheckmann.config.GlobalSettings;import lessrain.projects.uliheckmann.header.HeaderButton;/** * @author Thomas Meyer, Less Rain (thomas@lessrain.com) */class lessrain.projects.uliheckmann.header.TextButton extends HeaderButton{	private var _tf : DynamicTextField;	private var _label : String;	private var _hasIcon : Boolean;	private var _iconMC : MovieClip;	private var _iconColor : Color;		public function TextButton(targetMC_:MovieClip, label_:String, hasIcon_:Boolean)	{		super(targetMC_);		_label = label_.toLowerCase();		_hasIcon = hasIcon_;	}		public function initialize():Void	{		super.initialize();		_tf = new DynamicTextField(_targetMC.createEmptyMovieClip("tf",10));		_tf.initialize( _label, StyleSheet.getStyleSheet("main"), "header", false, false, 0, 0 );				if (_hasIcon)		{			_iconMC = _targetMC.attachMovie("ButtonCircle","icon",9);			_iconMC.stop();			_iconMC._y=6;			_iconColor = new Color(_iconMC);			_iconColor.setRGB( GlobalSettings.getInstance().highlightColor );			updateIcon();		}				HitArea.createHitArea( _targetMC, 1, 1 );				if (_eventDistributor.hasListeners())		{			_targetMC.onRollOver = Proxy.create(this, over);			_targetMC.onRollOut = _targetMC.onReleaseOutside = Proxy.create(this, out);			_targetMC.onRelease = Proxy.create(this, release);		}	}		private function updateIcon():Void	{		_iconMC._x=_tf.textWidth+6;	}		public function setText(label_:String):Void	{		_tf.text = label_.toLowerCase();		updateIcon();		HitArea.createHitArea( _targetMC, 1, 1 );		out();	}		public function rotate(degrees:Number):Void	{		_targetMC._rotation=degrees;	}		public function setEnabled(isEnabled_ : Boolean) : Void	{		_tf.target.enabled = isEnabled_;		super.setEnabled(isEnabled_);	}		private function over():Void	{		super.over();		if (_hasIcon)		{			if (_isInverted) _iconMC.gotoAndStop(2);			else _iconMC.gotoAndStop(1);		}	}		private function out():Void	{		super.out();		if (_hasIcon)		{			if (_isInverted) _iconMC.gotoAndStop(1);			else _iconMC.gotoAndStop(2);		}	}	public function finalize():Void	{		_iconMC.removeMovieClip();		_tf.target.removeMovieClip();		super.finalize();	}}