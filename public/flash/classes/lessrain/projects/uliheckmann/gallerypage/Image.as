import flash.display.BitmapData;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import lessrain.lib.utils.assets.Label;import lessrain.lib.utils.events.EventDistributor;import lessrain.lib.utils.events.IDistributor;import lessrain.lib.utils.events.IEvent;import lessrain.lib.utils.graphics.ShapeUtils;import lessrain.lib.utils.loading.FileItem;import lessrain.lib.utils.loading.FileListener;import lessrain.lib.utils.loading.PriorityLoader;import lessrain.lib.utils.Proxy;import lessrain.lib.utils.tween.TweenEvent;import lessrain.lib.utils.tween.TweenTimer;import lessrain.projects.uliheckmann.config.GlobalSettings;import lessrain.projects.uliheckmann.gallerypage.GalleryMediaFile;import lessrain.projects.uliheckmann.gallerypage.ImageEvent;import lessrain.projects.uliheckmann.utils.AdvancedColor;/** * @author Thomas Meyer, Less Rain (thomas@lessrain.com) */class lessrain.projects.uliheckmann.gallerypage.Image implements FileListener, IDistributor{	private static var ENABLE_COLOR_BURN:Boolean = false;		private var _targetMC:MovieClip;	private var _eventDistributor : EventDistributor;	private var _mediaFile : GalleryMediaFile;	private var _imageRect : Rectangle;	private var _sourceBitmap : BitmapData;	private var _zeroPoint : Point;	private var _tween : TweenTimer;	private var _loaderMC : MovieClip;	private var _topMC : MovieClip;	private var _topFillMC : MovieClip;	private var _topImageMC : MovieClip;		private var _advancedColor : AdvancedColor;	private var _isShowing : Boolean;	private var _isLoaded : Boolean;	private var _fillColor : Number;	private var _fullscreenWidth : Number;	public function Image(targetMC_:MovieClip, mediaFile_:GalleryMediaFile)	{		_targetMC=targetMC_;		_isShowing=false;		_isLoaded=false;		_mediaFile=mediaFile_;		_eventDistributor = new EventDistributor();		_eventDistributor.initialize(this);	}		public function initialize():Void	{		_loaderMC = _targetMC.createEmptyMovieClip("holder",1);		_topMC = _targetMC.createEmptyMovieClip("top",3);		_topFillMC = _topMC.createEmptyMovieClip("fill",13);		_topImageMC = _topMC.createEmptyMovieClip("img",2);		_targetMC._visible=false;				_advancedColor=new AdvancedColor(_topMC);		_zeroPoint = new Point(0,0);		_imageRect = new Rectangle(0,0,Stage.width, Stage.height);				_tween = new TweenTimer();		_tween.tweenDuration = 600;		_tween.tweenTarget = _advancedColor;		_tween.addEventListener(TweenEvent.TWEEN_COMPLETE, Proxy.create(this, onTweenComplete));	}		public function loadImage():Void	{		if (_mediaFile.mediaType == "swf")		{			PriorityLoader.getInstance().addFile( _topImageMC, _mediaFile.src, this, 90, "img", Label.getLabel("Loading.image") );			_loaderMC.removeMovieClip();			_loaderMC = _topImageMC;		}		else		{			PriorityLoader.getInstance().addFile( _loaderMC, _mediaFile.src, this, 90, "img", Label.getLabel("Loading.image") );		}	}		public function createFromMovieClip( imageMC_:MovieClip ):Void	{		_loaderMC=imageMC_;		onImageLoaded();	}		private function onResize():Void	{		var s:Number = (Stage.height+1)/_imageRect.height;		_targetMC._xscale=_targetMC._yscale=Math.ceil(s*100);				if (GlobalSettings.getInstance().enableColorFill)		{			_fullscreenWidth=Math.round(Stage.width/s);			if (_imageRect.width<_fullscreenWidth) drawColorFill();		}	}		private function onImageLoaded():Void	{		_isLoaded=true;				if (GlobalSettings.getInstance().enableFullscreen)		{			_imageRect.width=_loaderMC._width;			_imageRect.height=_loaderMC._height;						_sourceBitmap = new BitmapData( _imageRect.width, _imageRect.height, true );			_sourceBitmap.draw(_loaderMC);		}		else		{			var transform:Matrix = new Matrix();			var s:Number = (GlobalSettings.getInstance().stageHeight/_loaderMC._height);			transform.scale(s,s);			_imageRect.width=Math.floor(_loaderMC._width*s);			_imageRect.height=GlobalSettings.getInstance().stageHeight;						_sourceBitmap = new BitmapData( _imageRect.width, _imageRect.height, true );			_sourceBitmap.draw(_loaderMC,transform);		}				if (_mediaFile.mediaType == "swf")		{			_fillColor=0xff000000;		}		else		{			_loaderMC.removeMovieClip();			_topImageMC.attachBitmap(_sourceBitmap,1,"always",true);						if (GlobalSettings.getInstance().enableColorFill && _mediaFile.enableFill) calculateFillColor();			else _fillColor=0xff000000;		}				if (ENABLE_COLOR_BURN) _advancedColor.brightOffset=-255;		else _advancedColor.brightMultiplier=0;				if (GlobalSettings.getInstance().enableColorFill) _fullscreenWidth=GlobalSettings.getInstance().stageWidth;		else _fullscreenWidth=_imageRect.width;				if (GlobalSettings.getInstance().enableFullscreen)		{			/*			 * in fullscreen mode adjust the scalings and the _fullscreenWidth (in colorfill mode)			 * updateBitmaps is called implicitly			 */ 			onResize();			Stage.addListener(this);		}		else if (GlobalSettings.getInstance().enableColorFill)		{			 if (_imageRect.width<_fullscreenWidth) drawColorFill();		}		else		{			if (_mediaFile.align=="right") _topImageMC._x=GlobalSettings.getInstance().stageWidth-_imageRect.width;		}				distributeEvent(new ImageEvent( ImageEvent.IMAGE_LOADED, this ));	}		private function drawColorFill():Void	{		if (_mediaFile.align=="right")		{			_topImageMC._x=_fullscreenWidth-_imageRect.width;			ShapeUtils.drawRectangle(_topFillMC,0,0,_fullscreenWidth-_imageRect.width+1,_imageRect.height,_fillColor,100);		}		else ShapeUtils.drawRectangle(_topFillMC,_imageRect.width,0,_fullscreenWidth-_imageRect.width,_imageRect.height,_fillColor,100);	}		private function calculateFillColor():Void	{		var samples:Number = 20;		var sampleOffsetX:Number = (_mediaFile.align=="right" ? 10 : _imageRect.width-10);		var stepY:Number = Math.floor(_imageRect.height/samples);		var offsetY:Number = Math.floor(stepY/2);				var r:Number = 0, g:Number = 0, b:Number = 0, c:Number;		for (var i:Number=samples-1; i>=0; i--)		{			c=_sourceBitmap.getPixel(sampleOffsetX,offsetY+i*stepY);			r+=(c>>16);			g+=((c>>8)&0xFF);			b+=(c&0xFF);		}		r=Math.round(r/samples);		g=Math.round(g/samples);		b=Math.round(b/samples);				// c is set to the average color		_fillColor=(0xff<<24 | r<<16 | g<<8 | b);	}		public function show():Void	{		if (!_isShowing)		{			_targetMC._visible=true;			_isShowing = true;			_tween.reset();			_tween.tweenDuration = 600;			if (ENABLE_COLOR_BURN) _tween.setTweenProperty('brightOffset',_advancedColor.brightOffset,0);			else _tween.setTweenProperty('brightMultiplier',_advancedColor.brightMultiplier,1);			_tween.start();		}		else onTweenComplete();	}		public function hide():Void	{		if (_isShowing)		{			_isShowing = false;			_tween.reset();			_tween.tweenDuration = 400;			if (ENABLE_COLOR_BURN) _tween.setTweenProperty('brightOffset',_advancedColor.brightOffset,-255);			else _tween.setTweenProperty('brightMultiplier',_advancedColor.brightMultiplier,0);			_tween.start();		}		else onTweenComplete();	}		private function onTweenComplete():Void	{		if (_isShowing) distributeEvent(new ImageEvent( ImageEvent.IMAGE_SHOWING, this ));		else distributeEvent(new ImageEvent( ImageEvent.IMAGE_HIDDEN, this ));	}			public function finalize():Void	{		_eventDistributor.finalize();		_sourceBitmap.dispose();		_loaderMC.removeMovieClip();		_topMC.removeMovieClip();		_targetMC.removeMovieClip();	}		public function onLoadComplete(file : FileItem) : Void	{		onImageLoaded();	}	public function onLoadStart(file : FileItem) : Boolean { return null; }	public function onLoadProgress(file : FileItem, bytesLoaded : Number, bytesTotal : Number, percent : Number) : Void {}	public function addEventListener(type : String, func : Function) : Void {}	public function removeEventListener(type : String, func : Function) : Void {}	public function distributeEvent(eventObject : IEvent) : Void {}		public function get targetMC():MovieClip { return _targetMC; }	public function set targetMC(value:MovieClip):Void { _targetMC=value; }		public function get mediaFile():GalleryMediaFile { return _mediaFile; }	public function set mediaFile(value:GalleryMediaFile):Void { _mediaFile=value; }				public function get id():String { return _mediaFile.id; }		public function get isLoaded():Boolean { return _isLoaded; }	public function set isLoaded(value:Boolean):Void { _isLoaded=value; }}