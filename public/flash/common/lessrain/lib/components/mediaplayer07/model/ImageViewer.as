/** * @author Oliver List, Less Rain (o.list@lessrain.com) */import lessrain.lib.components.mediaplayer07.core.DataFile;import lessrain.lib.components.mediaplayer07.core.Media;import lessrain.lib.components.mediaplayer07.display.MediaPreview;import lessrain.lib.components.mediaplayer07.events.LoadEvent;import lessrain.lib.components.mediaplayer07.events.MediaPlayerEvent;import lessrain.lib.components.mediaplayer07.model.AbstractMediaPlayer;import lessrain.lib.utils.loading.FileItem;import lessrain.lib.utils.loading.FileListener;import lessrain.lib.utils.loading.PriorityLoader;import lessrain.lib.utils.Proxy;import lessrain.lib.components.mediaplayer07.core.Bandwidth;import lessrain.lib.components.mediaplayer07.display.ImageContainer;class lessrain.lib.components.mediaplayer07.model.ImageViewer extends AbstractMediaPlayer implements FileListener{	private var _imageContainer:ImageContainer;			/**	 * Constructor	 * 	 * @param	file_				Image DataFile	 * @param	imageContainer_		Image container movieclip	 * @param	previewContainer_	Media preview container movieclip	 */	public function ImageViewer( media_:Media, imageContainer_:ImageContainer, previewContainer_:MovieClip ) {		super(media_, previewContainer_);				_imageContainer = imageContainer_;		_duration = 0;	}		/**	 * @see AbstractMediaPlayer#loadFile	 */	public function loadFile(bandwidth_:Bandwidth) : Void	{		_bandwidth = bandwidth_;				// do we have a preview?		var preview:DataFile = getMedia().getPreview();		if(preview != null) {			_preview = new MediaPreview(_previewContainer, preview.src);			_preview.load(Proxy.create(this, onPreviewLoadDone));		} else {			doLoadImage();		}	}		/**	 * @see AbstractMediaPlayer#scrubTo	 */	public function scrubTo( scrubValue_ : Number ) : Void {		return;	}		/**	 * @see AbstractMediaPlayer#doSetVolume	 */	public function doSetVolume(volume_ : Number) : Void {	}		/**	 * @see AbstractMediaPlayer#getPercentLoaded	 */	public function getPercentLoaded():Number {		var bytesLoaded:Number = _imageContainer.loaderMC.getBytesLoaded();		var bytesTotal:Number = _imageContainer.loaderMC.getBytesTotal();		return (bytesLoaded > 10 ? (bytesLoaded * 100 / bytesTotal) : 0); 	}	/**	 * @see AbstractMediaPlayer#getAbsolutePlayheadPosition	 */	public function getAbsolutePlayheadPosition():Number {		return null;	}	/**	 * @see AbstractMediaPlayer#getRelativePlayheadPositon	 */	public function getRelativePlayheadPositon():Number {		return null;	}		/**	 * @see AbstractMediaPlayer#__doPlay	 */	public function __doPlay() : Void {		return;	}	/**	 * @see AbstractMediaPlayer#__doPause	 */	public function __doPause() : Void {		return;	}	/**	 * @see AbstractMediaPlayer#__doResume	 */	public function __doResume() : Void {		return;	}	/**	 * @see AbstractMediaPlayer#__doStop	 */	public function __doStop() : Void {		return;	}		public function finalize():Void {		_imageContainer = null;		_media = null;				super.finalize();	} 		/*	 * FileListener methods	 */	public function onLoadStart(file : FileItem) : Boolean {		distributeEvent(new LoadEvent(LoadEvent.LOAD_START, this));		return false;	}	public function onLoadComplete(file : FileItem) : Void {		_preview.hide();		_imageContainer.display();		distributeEvent(new LoadEvent(LoadEvent.LOAD_COMPLETE, this, _imageContainer.loaderMC.getBytesLoaded(), _imageContainer.loaderMC.getBytesTotal()));		distributeEvent(new MediaPlayerEvent(MediaPlayerEvent.PLAYER_START, this));	}	public function onLoadProgress(file : FileItem, bytesLoaded : Number, bytesTotal : Number, percent : Number) : Void {		if(!file.src == _media.getMaster().src) {			return;		}		distributeEvent(new LoadEvent(LoadEvent.LOAD_PROGRESS, this, bytesLoaded, bytesTotal));	}		private function onPreviewLoadDone():Void {		_preview.show();		doLoadImage();	}		private function doLoadImage():Void {		var src:String = _media.getMaster().src;		PriorityLoader.getInstance().addFile(_imageContainer.loaderMC, src, this, getLoadingPriority(), src, "Image");	}}