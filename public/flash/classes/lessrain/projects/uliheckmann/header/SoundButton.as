import lessrain.lib.utils.assets.Label;import lessrain.lib.utils.movieclip.HitArea;import lessrain.lib.utils.Proxy;import lessrain.projects.uliheckmann.config.GlobalSettings;import lessrain.projects.uliheckmann.header.HeaderButton;import lessrain.projects.uliheckmann.header.SoundBar;import lessrain.projects.uliheckmann.header.TextButton;import lessrain.projects.uliheckmann.sound.SoundController;/** * @author Thomas Meyer, Less Rain (thomas@lessrain.com) */class lessrain.projects.uliheckmann.header.SoundButton extends HeaderButton{	private static var BARS:Number=4;		private var _soundText : TextButton;	private var _animationMC : MovieClip;	private var _animationColor : Color;	private var _hitAreaMC : MovieClip;	private var _bars : Array;		public function SoundButton(targetMC_:MovieClip)	{		super(targetMC_);	}		public function initialize():Void	{		super.initialize();				_animationMC = _targetMC.createEmptyMovieClip("animation",3);		_animationMC._y=12;		_animationColor = new Color(_animationMC);		_animationColor.setRGB(GlobalSettings.getInstance().highlightColor);				var bar:SoundBar;		_bars = new Array();		for (var i : Number = 0; i < BARS; i++)		{			bar = new SoundBar(_animationMC.createEmptyMovieClip("bar_"+i,10+i));			bar.setPosition( 5*i,0 );			bar.initialize();			_bars.push(bar);		}				_hitAreaMC = HitArea.createHitArea(_targetMC, 1, 1, true, 0,0,BARS*4+(BARS-1)*1,12);				_soundText = new TextButton(_targetMC.createEmptyMovieClip("soundText",2),Label.getLabel("Header.sound.off"));		_soundText.setPosition(27,0);		_soundText.initialize();		_soundText.hide();				if (_eventDistributor.hasListeners())		{			_hitAreaMC.onRollOver = Proxy.create(this, over);			_hitAreaMC.onRollOut = _hitAreaMC.onReleaseOutside = Proxy.create(this, out);			_hitAreaMC.onRelease = Proxy.create(this, release);		}		update();	}		private function release():Void	{		SoundController.getInstance().toggleSound();		update();	}		private function update():Void	{		if (SoundController.getInstance().isMuted)		{			_soundText.setText( Label.getLabel("Header.sound.on") );			for (var i : Number = 0; i < _bars.length; i++) SoundBar(_bars[i]).isOn = false;		}		else		{			_soundText.setText( Label.getLabel("Header.sound.off") );			for (var i : Number = 0; i < _bars.length; i++) SoundBar(_bars[i]).isOn = true;		}	}		public function setEnabled(isEnabled_ : Boolean) : Void	{		_animationMC.enabled = isEnabled_;		super.setEnabled(isEnabled_);	}		public function hide(delay_:Number):Void	{		super.hide();		_soundText.hide();	}		public function fadeToWhite():Void	{		super.fadeToWhite();//		_soundText.fadeToWhite();	}		public function fadeToColor():Void	{		super.fadeToColor();//		_soundText.fadeToColor();	}		public function invert():Void	{		super.invert();		_soundText.invert();	}		public function revert():Void	{		super.revert();		_soundText.revert();	}		private function over():Void	{		_soundText.show();		super.over();	}		private function out():Void	{		_soundText.hide();		super.out();	}	public function finalize():Void	{		_animationMC.removeMovieClip();		_soundText.finalize();		super.finalize();	}}