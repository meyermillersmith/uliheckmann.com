package com.lessrain.controller;

import java.util.Map;



import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.lessrain.model.media.Portfolio;
import com.paulhopton.utils.jdbc.QueryExecuter;

/**
 * represents an action to be performed. Typically generated by a controller and passed to a service.
 * 
 * This also could have been called command, request or anything similar. It does nothing more than 
 * carry data although could conceivably perform some kind of checking on the data it receives - although 
 * a seperate validator, might be better suited to that task
 * 
 * @author paul hopton
 *
 */
public class Action {
	
	private static Log log = LogFactory.getLog(QueryExecuter.class);
	
	private String type;
	private Long id;
	private Portfolio portfolio;

	private Map<String, String[]> requestParams;


	/**
	 * @param type The String of the action to be performed
	 * @param id the id of object to be manipulated with the task
	 * @param portfolio the portfolio in which the object can be found.
	 */
	Action(String type, Long id, Portfolio portfolio){
		
		log.debug(">>>Action");
		
		log.debug("type"+ type);
		log.debug("type"+ id);
		if (portfolio != null){
			log.debug("type"+ portfolio.getName());
		}
		
		this.type = type;
		this.id = id;
		this.portfolio = portfolio;
		
		log.debug("action" + this);
		log.debug("<<<Action");
		
	}

	public String toString(){
		StringBuffer buff = new StringBuffer();
		buff.append(this.getClass().getSimpleName());
		buff.append("(");
		buff.append(this.hashCode());
		buff.append(") - ");
		buff.append("id:");
		if (id != null){
			buff.append(id.toString());
		} else{
			buff.append("none");
		}
		buff.append(", type:");
		buff.append(type);
		buff.append(", portfolio:");
		buff.append(portfolio);

		return buff.toString();
	}
	/**
	 * @return Returns the id.
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @return Returns the portfolio.
	 */
	public Portfolio getPortfolio() {
		return portfolio;
	}

	/**
	 * @return Returns the type.
	 */
	public String getType() {
		return type;
	}

	public void setRequestParams(Map<String, String[]> parameterMap) {
		this.requestParams = parameterMap;
	}
	
	public String getParameter(String parametername){
		if (requestParams.containsKey(parametername)){
			String[] found =  requestParams.get(parametername);
			return found[0];
		}
		return null;
	}

}
