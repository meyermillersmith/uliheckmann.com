import lessrain.projects.uliheckmann.effects.LetterMask;import lessrain.projects.uliheckmann.effects.LetterMaskFactory;import flash.geom.Matrix;import lessrain.lib.utils.assets.StyleSheet;import lessrain.lib.utils.text.DynamicTextField;import flash.geom.Point;import flash.filters.GlowFilter;import flash.display.BitmapData;import flash.geom.Rectangle;import lessrain.lib.utils.events.EventDistributor;import lessrain.lib.utils.events.IDistributor;import lessrain.lib.utils.events.IEvent;import lessrain.lib.utils.geom.Coordinate;import lessrain.lib.utils.Proxy;import lessrain.projects.uliheckmann.effects.Ants;import lessrain.projects.uliheckmann.effects.Fill;import lessrain.projects.uliheckmann.effects.WordEvent;/** * @author Thomas Meyer, Less Rain (thomas@lessrain.com) */class lessrain.projects.uliheckmann.effects.Letter implements IDistributor{	public static var MODE_INTRO:Number = 1;	public static var MODE_MENU:Number = 2;	public static var MODE_GALLERY:Number = 3;		public static var ANTS_INTRO_DELAY:Number = 80;	public static var FILL_SWAP_DELAY:Number = 50;		public static var FILL_SHOW_DURATION:Number = 600;	public static var FILL_HIDE_DURATION:Number = 600;	public static var FILL_SHOW_FAST_DURATION:Number = 300;	public static var FILL_HIDE_FAST_DURATION:Number = 300;		public static var ANTS_INTRO_DURATION:Number = 400;	public static var ANTS_SHOW_DURATION:Number = 300;	public static var ANTS_HIDE_DURATION:Number = 300;		public static var LETTER_SPACING:Number = 10;	public static var LINE_SPACING:Number = 10;	public static var SPACE_WIDTH:Number = 54;		public static var STATE_INVISIBLE:Number = 0;	public static var STATE_ANTS:Number = 1;	public static var STATE_FILL:Number = 2;	public static var STATE_BOTH:Number = 3;		private var _targetMC:MovieClip;	private var _letter:String;	private var _mode:Number;	private var _state:Number;		private var _x:Number;	private var _y:Number;	private var _width:Number;	private var _height:Number;	private var _antMC : MovieClip;	private var _ants : Ants;		private var _fillMC : MovieClip;	private var _currentFill : Fill;	private var _fillCount : Number;	private var _bitmapFills : Array;	private var _fillRect:Rectangle;	private var _fillOffset:Coordinate;	private var _antsBitmap : BitmapData;	private var _shapeBitmap : BitmapData;	private var _orderNum : Number;	private var _isLastLetter : Boolean;	private var _eventDistributor : EventDistributor;	private var _wasFilled : Boolean;	private var _antsComplete : Boolean;	private var _fillComplete : Boolean;		public function Letter(targetMC_:MovieClip, letter_:String, x_:Number, y_:Number, orderNum_:Number, isLastLetter_:Boolean)	{		_state=STATE_INVISIBLE;		_mode=MODE_INTRO;		_targetMC=targetMC_;		_letter=letter_.toLowerCase();		_bitmapFills=new Array();		_fillCount=0;		_x=x_;		_y=y_;		_orderNum=orderNum_;		_isLastLetter=isLastLetter_;		_wasFilled = false;		_antsComplete = false;		_fillComplete = false;		_fillOffset = new Coordinate(0,0);		if (_isLastLetter)		{			_eventDistributor = new EventDistributor();			_eventDistributor.initialize(this);		}	}		public function initialize():Void	{		_targetMC._x=_x;		_targetMC._y=_y;		_antMC = _targetMC.createEmptyMovieClip("ant", 10);		_fillMC = _targetMC.createEmptyMovieClip("fill", 9);				var letterMask : LetterMask = LetterMaskFactory.getInstance().getLetterMask(_letter);				_shapeBitmap = letterMask.getShapeBitmap();		_antsBitmap = letterMask.getAntsBitmap();				_ants = new Ants(_antMC);		_ants.maskImageBitmap=_antsBitmap;		if (_isLastLetter)		{			_ants.initializeEventDistributor();			_ants.addEventListener( WordEvent.STATE_COMPLETE, Proxy.create(this, onStateComplete) );		}		_ants.initialize();		_width=_ants.w;		_height=_ants.h;	}		public function setFill(id_:String):Void	{		_fillComplete = true;		_antsComplete = true;		for (var i : Number = _bitmapFills.length-1; i >= 0; i--)		{			var fill:Fill = _bitmapFills[i];			if (fill.id==id_)			{				// show the current fill (if any should be showing anyway)				_currentFill=fill;				if (_state==STATE_FILL || _state==STATE_BOTH) showCurrentFill();			}			else			{				// hide other fills				if (_state==STATE_FILL || _state==STATE_BOTH) fill.hide(_orderNum*FILL_SWAP_DELAY, FILL_SHOW_DURATION, false);				else fill.hide(0, FILL_HIDE_FAST_DURATION, false);			}		}	}		public function setState(state_:Number):Void	{		_state = state_;				// when hiding the letter the state complete is fired after both ants or fills are hidden, and therefore it needs double-checking		_antsComplete = (_state != STATE_INVISIBLE);		_fillComplete = (_state != STATE_INVISIBLE || _currentFill==null);						// Ants		if (_state==STATE_ANTS || _state==STATE_BOTH)		{			if (_mode==MODE_INTRO) _ants.show(_orderNum*ANTS_INTRO_DELAY,ANTS_INTRO_DURATION);			else _ants.show(0,ANTS_SHOW_DURATION);		}		else		{			_ants.hide(0,ANTS_HIDE_DURATION, !_antsComplete);		}				// Fill		if (_state==STATE_FILL || _state==STATE_BOTH) showCurrentFill();		else hideCurrentFill();	}		private function showCurrentFill():Void	{		if (_mode==MODE_INTRO)		{			_currentFill.show(0, FILL_SHOW_DURATION);		}		else		{			if (_wasFilled) _currentFill.show(_orderNum*FILL_SWAP_DELAY, FILL_SHOW_DURATION);			else _currentFill.show(0, FILL_SHOW_FAST_DURATION);		}		_wasFilled=true;	}		private function hideCurrentFill():Void	{		if (_state==STATE_FILL || _state==STATE_BOTH)		{			if (_wasFilled) _currentFill.hide(_orderNum*FILL_SWAP_DELAY, FILL_HIDE_DURATION, false);			else _currentFill.hide(0, FILL_HIDE_FAST_DURATION, false);		}		else _currentFill.hide(0, FILL_HIDE_FAST_DURATION, !_fillComplete);		_wasFilled=false;	}		public function addFill(id_:String, fillBitmap_ : BitmapData) : Void	{		for (var i : Number = _bitmapFills.length-1; i >= 0; i--)		{			var fill:Fill = _bitmapFills[i];			if (fill.id==id_) return;		}		_fillCount++;		var fill:Fill = new Fill(_fillMC.createEmptyMovieClip("fill_"+_fillCount, _fillCount));		if (_isLastLetter)		{			fill.initializeEventDistributor();			fill.addEventListener( WordEvent.STATE_COMPLETE, Proxy.create(this, onStateComplete) );		}		fill.id = id_;		fill.fillBitmap = fillBitmap_;		fill.maskImageBitmap = _shapeBitmap;		fill.initialize();		fill.setPosition(_fillOffset.x, _fillOffset.y);		_bitmapFills.push(fill);	}	private function onStateComplete(wordEvent:WordEvent):Void	{		if (wordEvent.getSource()==_ants) _antsComplete=true;		if (wordEvent.getSource()==_currentFill) _fillComplete=true;				if (_antsComplete && _fillComplete) distributeEvent( new WordEvent(WordEvent.STATE_COMPLETE, this) );	}		public function finalize():Void	{		for (var i : Number = _bitmapFills.length-1; i >= 0; i--) Fill(_bitmapFills[i]).finalize();		_ants.finalize();		_antMC.removeMovieClip();		_fillMC.removeMovieClip();		_bitmapFills=null;		_antsBitmap.dispose();		_shapeBitmap.dispose();		_eventDistributor.finalize();		_targetMC.removeMovieClip();	}		public function addEventListener(type : String, func : Function) : Void {}	public function removeEventListener(type : String, func : Function) : Void {}	public function distributeEvent(eventObject : IEvent) : Void {}		public function get targetMC():MovieClip { return _targetMC; }	public function set targetMC(value:MovieClip):Void { _targetMC=value; }		public function get letter():String { return _letter; }	public function set letter(value:String):Void { _letter=value; }		public function get width():Number { return _width; }	public function get height():Number { return _height; }		public function get mode():Number { return _mode; }	public function set mode(value:Number):Void { _mode=value; }			public function get x():Number { return _x; }	public function set x(value:Number):Void { _x=value; }	public function get y():Number { return _y; }	public function set y(value:Number):Void { _y=value; }		public function get fillRect():Rectangle { return _fillRect; }	public function set fillRect(value:Rectangle):Void { _fillRect=value; }		public function get fillOffset():Coordinate { return _fillOffset; }	public function set fillOffset(value:Coordinate):Void { _fillOffset=value; }}