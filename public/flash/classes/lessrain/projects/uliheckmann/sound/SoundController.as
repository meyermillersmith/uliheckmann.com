import lessrain.lib.utils.logger.LogManager;import lessrain.lib.utils.tween.TweenTimer;import lessrain.projects.uliheckmann.sound.EventSound;import lessrain.projects.uliheckmann.sound.StreamingSound;import lessrain.lib.utils.assets.Source;import lessrain.lib.utils.tween.TweenEvent;import lessrain.lib.utils.Proxy;/** * @author Thomas Meyer, Less Rain (thomas@lessrain.com) */class lessrain.projects.uliheckmann.sound.SoundController{	private static var MASTER_VOLUME:Number=100;	private static var instance : SoundController;	private var _filename : String;	/**	 * @return singleton instance of SoundController	 */	public static function getInstance() : SoundController	{		if (instance == null) instance = new SoundController();		return instance;	}	private var _targetMC:MovieClip;		private var _masterSound : Sound;	private var _masterFade : TweenTimer;	private var _masterVolume:Number;	private var _isMuted:Boolean;		private var _sharedObject : SharedObject;	private var _backgroundSound : StreamingSound;		private function SoundController()	{		_isMuted=false;		_masterVolume=MASTER_VOLUME;	}		public function initialize():Void	{		createBackgroundSound();				_filename = Source.getSource("Soundtrack").substring(Source.getSource("Soundtrack").lastIndexOf("/")+1, Source.getSource("Soundtrack").lastIndexOf("."));				_sharedObject = SharedObject.getLocal("Sound."+_filename);		if (_sharedObject.data !=null && _sharedObject.data.soundMuted!=null) _isMuted=_sharedObject.data.soundMuted;				if (_isMuted) masterVolume = 0;		else		{			masterVolume = MASTER_VOLUME;			_backgroundSound.start();		}				_masterFade = new TweenTimer();		_masterFade.tweenTarget = this;		_masterFade.tweenDuration = 1000;		_masterFade.addEventListener(TweenEvent.TWEEN_COMPLETE, Proxy.create(this, onMasterFadeComplete));		_masterSound = new Sound(  );	}		private function onMasterFadeComplete(e:TweenEvent):Void	{		if (_isMuted) _backgroundSound.stop();	}		public function toggleSound():Void	{		_isMuted=!_isMuted;				_sharedObject.clear();		delete _sharedObject;		_sharedObject = SharedObject.getLocal("Sound."+_filename);		_sharedObject.data.soundMuted = _isMuted;		_sharedObject.flush();							_masterFade.reset();		if (_isMuted) _masterFade.setTweenProperty("masterVolume",_masterSound.getVolume(),0);		else		{			_masterFade.setTweenProperty("masterVolume",_masterSound.getVolume(),100);			_backgroundSound.start();		}		_masterFade.start();	}		private function createBackgroundSound():Void	{		_backgroundSound = new StreamingSound( _targetMC.createEmptyMovieClip("bg", _targetMC.getNextHighestDepth()) );		_backgroundSound.src = Source.getSource("Soundtrack");		_backgroundSound.loop = 0;	}		public function get isMuted():Boolean { return _isMuted; }	public function set isMuted(value:Boolean):Void { _isMuted=value; }		public function get masterVolume():Number { return _masterVolume; }	public function set masterVolume(value:Number):Void	{		_masterVolume=value;		_masterSound.setVolume(_masterVolume);	}		public function get targetMC():MovieClip { return _targetMC; }	public function set targetMC(value:MovieClip):Void { _targetMC=value; }}